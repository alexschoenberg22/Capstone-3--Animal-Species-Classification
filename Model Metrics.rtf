{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red242\green242\blue242;\red152\green74\blue3;
\red15\green112\blue1;\red51\green110\blue109;\red0\green0\blue0;\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c87059;\cssrgb\c96078\c96078\c96078;\cssrgb\c66667\c36471\c0;
\cssrgb\c0\c50196\c0;\cssrgb\c25098\c50196\c50196;\cssrgb\c0\c0\c0\c87059;\cssrgb\c96078\c96078\c96078;}
\margl1440\margr1440\vieww19600\viewh9960\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Model Metrics\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sequential Model:\
\
model1 = Sequential()\
\
model1.add(Conv2D(filters=\cf4 \strokec4 32\cf2 \strokec2 , kernel_size=(\cf4 \strokec4 3\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ), activation=\cf5 \strokec5 'relu'\cf2 \strokec2 , input_shape=(\cf4 \strokec4 224\cf2 \strokec2 ,\cf4 \strokec4 224\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ,))) \
model1.add(Conv2D(filters=\cf4 \strokec4 32\cf2 \strokec2 , kernel_size=(\cf4 \strokec4 3\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ), activation=\cf5 \strokec5 'relu'\cf2 \strokec2 ))\
model1.add(BatchNormalization())\
model1.add(MaxPool2D(\cf4 \strokec4 2\cf2 \strokec2 ,\cf4 \strokec4 2\cf2 \strokec2 ))\
\pard\pardeftab720\partightenfactor0

\f2\i \cf6 \strokec6 #model1.add(Dropout(0.25))
\f1\i0 \cf2 \strokec2 \
\
model1.add(Conv2D(filters=\cf4 \strokec4 64\cf2 \strokec2 , kernel_size=(\cf4 \strokec4 3\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ), activation=\cf5 \strokec5 'relu'\cf2 \strokec2 ))\
model1.add(BatchNormalization())\
model1.add(MaxPool2D(\cf4 \strokec4 2\cf2 \strokec2 ,\cf4 \strokec4 2\cf2 \strokec2 ))\

\f2\i \cf6 \strokec6 #model1.add(Dropout(0.25))
\f1\i0 \cf2 \strokec2 \
\
model1.add(Conv2D(filters=\cf4 \strokec4 128\cf2 \strokec2 , kernel_size=(\cf4 \strokec4 3\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ), activation=\cf5 \strokec5 'relu'\cf2 \strokec2 ))\
model1.add(BatchNormalization())\
model1.add(MaxPool2D(\cf4 \strokec4 2\cf2 \strokec2 ,\cf4 \strokec4 2\cf2 \strokec2 ))\

\f2\i \cf6 \strokec6 #model1.add(Dropout(0.25))
\f1\i0 \cf2 \strokec2 \
\
model1.add(Conv2D(filters=\cf4 \strokec4 256\cf2 \strokec2 , kernel_size=(\cf4 \strokec4 3\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ), activation=\cf5 \strokec5 'relu'\cf2 \strokec2 ))\
model1.add(BatchNormalization())\
model1.add(MaxPool2D(\cf4 \strokec4 2\cf2 \strokec2 ,\cf4 \strokec4 2\cf2 \strokec2 ))\

\f2\i \cf6 \strokec6 #model1.add(Dropout(0.25))
\f1\i0 \cf2 \strokec2 \
\
model1.add(Flatten())\
\
model1.add(Dense(\cf4 \strokec4 256\cf2 \strokec2 , activation=\cf5 \strokec5 'relu'\cf2 \strokec2 ))\
model1.add(BatchNormalization())\

\f2\i \cf6 \strokec6 #model1.add(Dropout(0.5))
\f1\i0 \cf2 \strokec2 \
\
model1.add(Dense(\cf4 \strokec4 2\cf2 \strokec2 , activation = \cf5 \strokec5 'softmax'\cf2 \strokec2 ))\
\
Compiled using:\
loss = categorical_crossentropy\
metrics = accuracy\
optimizer = adam\
early stopping callback, patience = 10\
learning rate reduction callback, monitoring validation accuracy, patience = 2\
\
Trainable parameters: 9,837,090\
Non-trainable parameters: 1,472\
\
\
\
MobileNetV2 model:\
\
mnet = MobileNetV2(include_top = \cf4 \strokec4 False\cf2 \strokec2 , weights = \cf5 \strokec5 'imagenet'\cf2 \strokec2 , input_shape=(\cf4 \strokec4 224\cf2 \strokec2 ,\cf4 \strokec4 224\cf2 \strokec2 ,\cf4 \strokec4 3\cf2 \strokec2 ))\
model2 = Sequential([mnet,\
                    GlobalAveragePooling2D(),\
                    Dense(\cf4 \strokec4 512\cf2 \strokec2 , activation = \cf5 \strokec5 "ReLU"\cf2 \strokec2 ),\
                    BatchNormalization(),\
                    Dropout(\cf4 \strokec4 0.3\cf2 \strokec2 ),\
                    Dense(\cf4 \strokec4 128\cf2 \strokec2 , activation = \cf5 \strokec5 "ReLU"\cf2 \strokec2 ),\
                    Dropout(\cf4 \strokec4 0.1\cf2 \strokec2 ),\
                    Dense(\cf4 \strokec4 32\cf2 \strokec2 , activation = \cf5 \strokec5 "ReLU"\cf2 \strokec2 ),\
                    Dropout(\cf4 \strokec4 0.3\cf2 \strokec2 ),\
                    Dense(\cf4 \strokec4 2\cf2 \strokec2 , activation = \cf5 \strokec5 "sigmoid"\cf2 \strokec2 )])\
model2.layers[\cf4 \strokec4 0\cf2 \strokec2 ].trainable = \cf4 \strokec4 False\
\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb8 \outl0\strokewidth0 Compiled using:\
loss = categorical_crossentropy\
metrics = accuracy\
optimizer = adam\
early stopping callback, patience = 10\
learning rate reduction callback, monitoring validation accuracy, patience = 2\
\
Trainable parameters: 726,754\
Non-trainable parameters: 2,259,008\cf4 \cb3 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
}